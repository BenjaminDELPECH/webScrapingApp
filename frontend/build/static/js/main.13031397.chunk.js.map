{"version":3,"sources":["components/header/Header.js","components/shared/Loading.js","components/shared/Error.js","components/todo/CRUD.js","components/todoList/CRUD.js","components/webscraping/CRUD.js","components/webscraping/KeyWordGraph.js","components/shared/functions/convertGraphQLSetToLabelData.js","components/webscraping/KeyWordList.js","App.js","components/auth/Auth.js","Root.js","serviceWorker.js","index.js"],"names":["Header","className","Loading","type","color","height","width","Error","error","Object","graphQLErrors","map","i","message","key","gql","GET_KEYWORDS","KeyWordGraph","elem","setData","labelFieldName","valueFieldName","labelsTab","data","length","push","newLabelsTab","newData","element","sameDateCpt","searchDuplicate","j","console","log","totalVal","k","parseInt","labels","convertGraphQLSetToLabelData","resultSet","chartData","options","chart","id","xaxis","categories","series","name","title","keyword","charAt","toUpperCase","slice","KeyWordList","useQuery","loading","keywords","App","Auth","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","Root","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13031397.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"block\">\r\n                <div className=\"centered\">\r\n                    Ali Express sales number tracker\r\n                </div>\r\n\r\n            </div>\r\n            {/* <div className=\"blockRight\">\r\n                <div className=\"centered\">\r\n                    <div>Inscription</div>\r\n                </div>\r\n                <div className=\"centered\">\r\n                    <div>Connexion</div>\r\n                </div>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport ReactLoading from 'react-loading';\r\n \r\nconst Loading = ({ type, color }) => (\r\n    <ReactLoading type={type} color={color} height={'20%'} width={'20%'} />\r\n);\r\n \r\nexport default Loading;","import React from 'react'\r\n\r\nconst Error = ({ error }) => {\r\n    if (error instanceof Object) {\r\n        return (\r\n            <div> Errors \r\n                {error.graphQLErrors.map(({ message }, i) => (\r\n                <span key={i}>{message} e</span>\r\n            ))}\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>Error {error.message}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Error\r\n","import gql from 'graphql-tag';\r\n\r\nexport const GET_TODO_BY_LIST = gql`\r\nquery($todoListId:Int!){\r\n  todoByList(todoListId:$todoListId){\r\n    id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nexport const CREATE_TODO = gql`\r\nmutation($name:String!, $todo_list_id:Int!){\r\n  createTodo(name:$name, todoListId:$todo_list_id){\r\n    todo{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const DELETE_TODO = gql`\r\nmutation($todo_id:Int!){\r\n  deleteTodo(todoId:$todo_id){\r\n    id\r\n  }\r\n}\r\n`;","import gql from 'graphql-tag';\r\n\r\nexport const GET_ALL_TODOLIST = gql`\r\n{\r\n  allTodoList{\r\n    id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nexport const CREATE_TODOLIST = gql`\r\nmutation($name:String!){\r\n  createTodoList(name:$name){\r\n    todoList{\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const DELETE_TODOLIST = gql`\r\nmutation($todo_list_id:Int!){\r\n  deleteTodoList(todoListId:$todo_list_id){\r\n    id\r\n  }\r\n}\r\n`;","import gql from 'graphql-tag';\r\n\r\nexport const GET_KEYWORDS = gql`\r\n{\r\n    keywords{\r\n      id\r\n      keyword\r\n      resultSet{\r\n        id\r\n        nbSale\r\n        date\r\n      }\r\n    }\r\n  }\r\n`;","import React from 'react'\r\nimport { convertGraphQLSetToLabelData } from '../shared/functions/convertGraphQLSetToLabelData';\r\nimport Chart from \"react-apexcharts\";\r\n\r\nconst KeyWordGraph = ({ elem }) => {\r\n\r\n\r\n    const {labels, data} = convertGraphQLSetToLabelData(elem.resultSet, \"date\", \"nbSale\");\r\n    const chartData = {\r\n        options: {\r\n            chart: {\r\n                id: \"basic-bar\"\r\n            },\r\n            xaxis: {\r\n                categories: labels\r\n            }\r\n        },\r\n        series: [\r\n            {\r\n                name: \"series-1\",\r\n                data: data\r\n            }\r\n        ]\r\n    };\r\n\r\n    let title = elem.keyword;\r\n    title = title.charAt(0).toUpperCase() + title.slice(1);\r\n    return (\r\n        <div className=\"keyWordGraph\">\r\n            <div className=\"titleChart\">{title}</div>\r\n            <Chart\r\n                options={chartData.options}\r\n                series={chartData.series}\r\n                type=\"bar\"\r\n                width=\"500\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KeyWordGraph\r\n","export const convertGraphQLSetToLabelData = function (setData, labelFieldName, valueFieldName) {\r\n    let labelsTab = [];\r\n    let data = [];\r\n    let elem;\r\n    for (let i = 0; i < setData.length; i++) {\r\n        elem = setData[i];\r\n        labelsTab.push(elem[labelFieldName]);\r\n        data.push(elem[valueFieldName]);\r\n    }\r\n    let newLabelsTab = [];\r\n    let newData = [];\r\n    for (let i = 0; i < labelsTab.length; i++) {\r\n        const element = labelsTab[i];\r\n        let sameDateCpt = 0;\r\n        let searchDuplicate = true;\r\n        if (i < labelsTab.length - 1) {\r\n            let j = i;\r\n            while (searchDuplicate === true) {\r\n                if (labelsTab[j] === element && j < labelsTab.length) {\r\n                    console.log(element);\r\n                    sameDateCpt += 1;\r\n                } else {\r\n                    searchDuplicate = false;\r\n                }\r\n                j++;\r\n            }\r\n            let totalVal = 0;\r\n            for (let k = i; k < i + sameDateCpt; k++) {\r\n                const element = data[k];\r\n                totalVal += parseInt(element, 10);\r\n            }\r\n            newLabelsTab.push(element);\r\n            newData.push(totalVal / sameDateCpt);\r\n            i += sameDateCpt - 1;\r\n        } else {\r\n            newLabelsTab.push(element);\r\n            newData.push(data[i]);\r\n        }\r\n    }\r\n    console.log(newLabelsTab);\r\n    console.log(newData);\r\n\r\n    return { labels: newLabelsTab, data: newData };\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport Loading from '../shared/Loading';\r\nimport Error from '../shared/Error';\r\nimport { GET_KEYWORDS} from './CRUD'\r\nimport KeyWordGraph from './KeyWordGraph'\r\n\r\nconst KeyWordList = () => {\r\n    \r\n\r\n    const {loading, error, data }= useQuery(GET_KEYWORDS);\r\n    console.log(data);\r\n\r\nif (loading) return <Loading />;\r\n  if (error) return <Error error={error} />;\r\n  else return (\r\n    <>\r\n      <div className=\"containerCentered\">\r\n        {data.keywords.map(elem => (\r\n          <KeyWordGraph key={elem.id} elem={elem} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default KeyWordList\r\n","import React from 'react';\r\nimport Header from './components/header/Header'\r\nimport MainTodo from './components/todoList/MainTodo'\r\nimport KeyWordList from './components/webscraping/KeyWordList'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"body\">\r\n        <KeyWordList />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\n\r\nconst Auth = () => {\r\n    return (\r\n        <div>\r\n            auth\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n","import React from 'react';\r\nimport App from './App';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport Auth from './components/auth/Auth'\r\n\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { setContext } from 'apollo-link-context';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:8000/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('authToken');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `JWT ${token}` : \"sdfs\",\r\n    }\r\n  }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nconst Root = () => {\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            {!localStorage.getItem('authToken') ? <App /> : <Auth />}\r\n        </ApolloProvider>\r\n    )\r\n}\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport './webScraping.css';\r\nimport Root from './Root';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}